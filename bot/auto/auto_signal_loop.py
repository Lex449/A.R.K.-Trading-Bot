"""
A.R.K. Auto Signal Loop ‚Äì Final Boss Ultra Premium Build 2025  
Smart Parallel US Market Scanner mit Deep Diagnostics, Rejection Insights und Live Signal Protocols.  
Built to uncover every failure point ‚Äì you never miss a trade again.  
Made in Bali. Engineered with German Precision.
"""

import asyncio
import time
from math import floor
from bot.auto.heartbeat_manager import send_heartbeat
from bot.auto.connection_watchdog import check_connection
from bot.engine.analysis_engine import analyze_symbol
from bot.utils.logger import setup_logger
from bot.utils.language import get_language
from bot.utils.i18n import get_text
from bot.utils.market_session_guard import is_us_market_open, minutes_until_market_open
from bot.utils.api_bridge import record_call, monitor as usage_monitor
from bot.config.settings import get_settings

# === Setup ===
logger = setup_logger(__name__)
config = get_settings()
RUNNING = True
MIN_CONFIDENCE = 50.0

def build_signal_bar(conf: float, bars: int = 20) -> str:
    filled = floor(conf / 100 * bars)
    return "‚ñà" * filled + "‚ñë" * (bars - filled)

async def auto_signal_loop(application):
    logger.info("üöÄ [AutoSignalLoop] Ultra Loop gestartet.")

    symbols_raw = config.get("AUTO_SIGNAL_SYMBOLS", "")
    symbols = [s.strip().upper() for s in symbols_raw.split(",") if s.strip()]
    chat_id = int(config.get("TELEGRAM_CHAT_ID", 0))
    interval = config.get("SIGNAL_CHECK_INTERVAL_SEC", 60)

    if not symbols:
        logger.critical("‚ùå [AutoSignalLoop] Keine Symbole gefunden. Check .env ‚Üí AUTO_SIGNAL_SYMBOLS.")
        return

    logger.info(f"üìä [AutoSignalLoop] {len(symbols)} Symbole geladen: {symbols[:5]}...")

    notified = False

    while RUNNING:
        try:
            await send_heartbeat(application)

            if not await check_connection():
                logger.warning("‚ö†Ô∏è [AutoSignalLoop] Telegram-Verbindung gest√∂rt. Retry in 30s.")
                await asyncio.sleep(30)
                continue

            logger.info(f"üì° [AutoSignalLoop] Analyse-Zyklus gestartet: {len(symbols)} Symbole...")

            tasks = [analyze_and_dispatch(application, symbol, chat_id) for symbol in symbols]
            await asyncio.gather(*tasks)

            logger.info("‚úÖ [AutoSignalLoop] Zyklus abgeschlossen. Pause beginnt...")

            # === Einmalige Aktivierungsbenachrichtigung ===
            if not notified:
                await application.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ *Auto Signal Loop aktiviert* ‚Äì alle 60 Sekunden wird nun gepr√ºft.\n\n_Silent Mode aktiv. Signale nur bei hoher Qualit√§t._",
                    parse_mode="Markdown"
                )
                notified = True

        except Exception as e:
            logger.exception(f"üî• [AutoSignalLoop] Totalabbruch: {e}")

        await asyncio.sleep(interval)

async def analyze_and_dispatch(application, symbol, chat_id):
    try:
        logger.debug(f"üîç Beginne Analyse: {symbol}")
        start = time.perf_counter()
        result = await analyze_symbol(symbol, chat_id=chat_id)
        runtime = time.perf_counter() - start
        record_call(symbol)

        if result is None:
            logger.info(f"‚ö†Ô∏è [AutoSignalLoop] Kein verwertbares Signal: {symbol}")
            return

        action = result.get("combined_action", "Neutral ‚ö™")
        confidence = result.get("avg_confidence", 0.0)
        score = result.get("signal_score", 0)
        rating = result.get("signal_category", "N/A")
        price = result.get("last_price", "n/a")

        if action not in ["Long üìà", "Short üìâ"]:
            logger.info(f"‚õî Kein Signal bei {symbol} ‚Üí Action: {action}")
            return

        if confidence < MIN_CONFIDENCE:
            logger.info(f"‚õî Confidence zu niedrig f√ºr {symbol}: {confidence:.1f}%")
            return

        bar = build_signal_bar(confidence)
        runtime_tag = f"‚öôÔ∏è {runtime:.2f}s"
        total = usage_monitor.get_call_count()
        avg = usage_monitor.get_average_confidence()
        lang = get_language(chat_id) or "en"

        text = (
            f"üì° *A.R.K. Live Signal!*\n\n"
            f"*Symbol:* `{symbol}`\n"
            f"*Direction:* {action}\n"
            f"*Confidence:* `{confidence:.1f}%`\n"
            f"*Signal Score:* `{score}/100`\n"
            f"*Rating:* {rating}\n"
            f"*Price:* `${price}`\n"
            f"*Signal Bar:* [{bar}]\n"
            f"{runtime_tag} ‚Äì Signal #{total} today\n"
            f"_√ò Confidence: {avg:.1f}%_\n\n"
            f"_Markets move fast. Be precise. Be ready._"
        )

        await application.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

        logger.info(f"‚úÖ [AutoSignalLoop] Signal gesendet: {symbol} ({action})")

    except Exception as e:
        logger.exception(f"‚ùå Analysefehler bei {symbol}: {e}")

async def stop_auto_signal_loop():
    global RUNNING
    RUNNING = False
    logger.info("üõë [AutoSignalLoop] Manuell gestoppt.")
