"""
A.R.K. Internationalization (i18n) Engine ‚Äì Ultra Premium Localization Build.
Handles multilingual support for all bot interactions.
"""

import logging
from bot.utils.logger import setup_logger

# Setup Structured Logger
logger = setup_logger(__name__)

# === Supported Translations ===
translations = {
    "en": {
        "start": "üëã Hello {user}! Welcome to *A.R.K. Trading Bot*.\n\nUse /help to explore available features.",
        "help": "‚ÑπÔ∏è *Available Commands:*\n/start ‚Äì Start the bot\n/help ‚Äì Show commands\n/analyse [symbol] ‚Äì Analyze a symbol (e.g., /analyse AAPL)\n/signal ‚Äì Live signals\n/status ‚Äì Current bot statistics\n/uptime ‚Äì Bot running time\n/shutdown ‚Äì Shut down bot",
        "analysis_no_symbol": "‚ùå Please provide a valid symbol. Example: `/analyse AAPL`",
        "signal_sent": "‚úÖ Signal sent successfully!",
        "signal_failed": "‚ùå Signal could not be sent.",
        "session_summary": "üìä *Session Summary*",
        "uptime": "‚è±Ô∏è *Bot Uptime:*",
        "shutdown": "üõë Bot is shutting down. See you soon!",
        "language_changed": "‚úÖ Language updated successfully!",
        "error_occurred": "‚ùå An unexpected error occurred. Please try again later.",
        "health_ok": "‚úÖ *System Health Check:* All systems operational.",
        "health_fail": "‚ùå *System Health Check:* Failure detected.",
        "global_error_report": "‚ö†Ô∏è An unexpected error occurred:\n\n`{error}`",
    },
    "de": {
        "start": "üëã Hallo {user}! Willkommen beim *A.R.K. Trading Bot*.\n\nVerwende /help, um verf√ºgbare Funktionen zu entdecken.",
        "help": "‚ÑπÔ∏è *Verf√ºgbare Befehle:*\n/start ‚Äì Bot starten\n/help ‚Äì Befehle anzeigen\n/analyse [Symbol] ‚Äì Symbol analysieren (z.B. /analyse AAPL)\n/signal ‚Äì Live-Signale\n/status ‚Äì Aktuelle Bot-Statistik\n/uptime ‚Äì Laufzeit des Bots\n/shutdown ‚Äì Bot herunterfahren",
        "analysis_no_symbol": "‚ùå Bitte ein g√ºltiges Symbol angeben. Beispiel: `/analyse AAPL`",
        "signal_sent": "‚úÖ Signal erfolgreich gesendet!",
        "signal_failed": "‚ùå Signal konnte nicht gesendet werden.",
        "session_summary": "üìä *Session Zusammenfassung*",
        "uptime": "‚è±Ô∏è *Bot Laufzeit:*",
        "shutdown": "üõë Bot wird heruntergefahren. Bis bald!",
        "language_changed": "‚úÖ Sprache erfolgreich ge√§ndert!",
        "error_occurred": "‚ùå Ein unerwarteter Fehler ist aufgetreten. Bitte sp√§ter erneut versuchen.",
        "health_ok": "‚úÖ *System Gesundheitscheck:* Alle Systeme betriebsbereit.",
        "health_fail": "‚ùå *System Gesundheitscheck:* Fehler erkannt.",
        "global_error_report": "‚ö†Ô∏è Ein unerwarteter Fehler ist aufgetreten:\n\n`{error}`",
    }
}

SUPPORTED_LANGUAGES = ["en", "de"]

def get_text(key: str, lang: str = "en") -> str:
    """
    Fetches the localized text for a given key and language safely.

    Args:
        key (str): Text key to translate.
        lang (str): Language code ('en', 'de').

    Returns:
        str: Translated string, or fallback if missing.
    """
    try:
        if lang not in SUPPORTED_LANGUAGES:
            logger.warning(f"[i18n] Unsupported language '{lang}', defaulting to English.")
            lang = "en"

        lang_data = translations.get(lang, translations["en"])
        text = lang_data.get(key)

        if text:
            return text
        else:
            logger.warning(f"[i18n] Missing translation key '{key}' for language '{lang}'.")
            return f"üîç Missing translation for `{key}`"

    except Exception as e:
        logger.error(f"[i18n] Fatal translation lookup error: {e}")
        return f"‚ö†Ô∏è Translation Error for `{key}`"
