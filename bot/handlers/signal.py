from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from bot.utils.analysis import analyse_market
from bot.utils.formatter import format_signal
from bot.config.settings import get_settings

# Asynchroner Signal-Handler f√ºr den /signal Befehl
async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Dieser Handler wird aufgerufen, wenn der Benutzer den /signal-Befehl ausf√ºhrt."""
    
    # Informiere den Benutzer, dass die Analyse gestartet wird
    await update.message.reply_text("üì° Analysiere M√§rkte...")

    symbols = ["US100/USDT", "US30/USDT", "US500/USDT"]  # M√§rkte, die analysiert werden sollen
    results = []  # Ergebnisse der Analyse

    # Analyse jedes Symbols
    for symbol in symbols:
        try:
            result = analyse_market(symbol)  # Marktanalyse durchf√ºhren

            if result:
                # Wenn eine Analyse erfolgreich war, wird sie formatiert und der Liste hinzugef√ºgt
                trend = result["trend"]
                confidence = result["confidence"]
                pattern = result["pattern"]
                formatted_signal = format_signal(symbol, trend, confidence, pattern)
                results.append(formatted_signal)
            else:
                results.append(f"‚ö†Ô∏è Keine Analyse-Daten f√ºr {symbol}")

        except Exception as e:
            # Fehlerbehandlung bei der Analyse jedes Symbols
            print(f"[ERROR] Fehler bei der Analyse von {symbol}: {e}")
            results.append(f"‚ö†Ô∏è Fehler bei der Analyse von {symbol}")

    # Alle Signale in einer Nachricht zusammenfassen
    message = "\n\n".join(results)

    # Sende das Ergebnis der Analyse zur√ºck an den Benutzer
    await update.message.reply_markdown(message)

# CommandHandler f√ºr den /signal Befehl
signal_handler = CommandHandler("signal", signal)
