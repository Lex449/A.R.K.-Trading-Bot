import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.analytics.performance_tracker import get_performance_summary
from bot.analytics.win_loss_report import generate_win_loss_report
from bot.utils.error_reporter import report_error
from bot.utils.logger import setup_logger

# Setup structured logger
logger = setup_logger(__name__)

async def performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler for /performance command.
    Provides live trading session statistics.
    """
    chat_id = update.effective_chat.id
    user = update.effective_user.first_name or "Trader"

    try:
        summary = get_performance_summary()
        await update.message.reply_text(summary, parse_mode="Markdown")
        logger.info(f"/performance report requested by {user}")

    except Exception as e:
        await report_error(context.bot, chat_id, e, context_info="Performance Command Error")
        logger.error(f"Performance command error: {e}")

async def winloss(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler for /winloss command.
    Provides win/loss performance breakdown.
    """
    chat_id = update.effective_chat.id
    user = update.effective_user.first_name or "Trader"

    try:
        report = generate_win_loss_report()
        await update.message.reply_text(report, parse_mode="Markdown")
        logger.info(f"/winloss report generated by {user}")

    except Exception as e:
        await report_error(context.bot, chat_id, e, context_info="WinLoss Command Error")
        logger.error(f"WinLoss command error: {e}")
